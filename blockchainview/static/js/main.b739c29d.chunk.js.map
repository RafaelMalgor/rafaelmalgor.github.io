{"version":3,"sources":["components/BlockchainView/BlockChainView.module.css","components/BlockView/BlockView.js","models/Block.js","utils/blockchain.js","components/Intro/Intro.js","components/Faq/Faq.js","components/BlockchainView/BlockchainView.js","App.js","reportWebVitals.js","index.js","components/BlockView/BlockView.module.css"],"names":["module","exports","BlockView","props","handleChange","block","onUpdateBlock","className","style","valid","invalid","type","value","prevHash","onChange","event","target","payload","nonce","readOnly","hash","button","onClick","onMine","id","BLock","difficulty","this","result","startsWith","repeat","md5","validateBlockChain","blocks","i","length","validate","Intro","Faq","BlockchainView","blockViews","map","legs","validleg","invalidleg","App","useState","total","setTotal","setDifficulty","Block","setBlocks","updateBlock","updatedBlock","filter","mineBlock","mine","newTotal","last","newBlocks","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b739c29d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"BlockChainView_block__RUB2R\",\"blocks\":\"BlockChainView_blocks__3AiXT\",\"validleg\":\"BlockChainView_validleg___ewTn\",\"invalidleg\":\"BlockChainView_invalidleg__1yjL2\",\"legs\":\"BlockChainView_legs__be3pq\"};","import style from './BlockView.module.css';\r\n\r\nfunction BlockView(props) {\r\n\r\n    let handleChange = (block) => {\r\n        props.onUpdateBlock(block);\r\n    };\r\n\r\n    let onMineClicked = () => {\r\n        props.onMine(props.block.id);\r\n    };\r\n\r\n    return <div className={style.block + ' ' + (!props.block.valid ? style.invalid : '')}>\r\n        <label>Prev. Hash</label>\r\n        <input type=\"text\" value={props.block.prevHash} onChange={(event) => handleChange({ ...props.block, prevHash: event.target.value })}></input>\r\n        <label>Payload</label>\r\n        <textarea value={props.block.payload} onChange={(event) => handleChange({ ...props.block, payload: event.target.value })}></textarea>\r\n        <label>Nonce</label>\r\n        <input type=\"text\" value={props.block.nonce} readOnly></input>\r\n        <label>Hash</label>\r\n        <input type=\"text\" value={props.block.hash} readOnly></input>\r\n        <button className={style.button} onClick={onMineClicked}>Mine!</button>\r\n    </div>\r\n}\r\n\r\nexport default BlockView;","import md5 from 'md5';\r\n\r\nclass BLock {\r\n    constructor(id, prevHash, payload, difficulty) {\r\n        this.id = id;\r\n        this.prevHash = prevHash;\r\n        this.payload = payload;\r\n        this.nonce = 0;\r\n        this.difficulty = difficulty\r\n    }\r\n\r\n    mine() {\r\n        let result = '';\r\n        while (!result.startsWith('0'.repeat(this.difficulty))) {\r\n            this.nonce++;\r\n            result = md5(this.payload + this.prevHash + this.nonce);\r\n        }\r\n        this.hash = result;\r\n    }\r\n\r\n    validate() {\r\n        return this.hash == md5(this.payload + this.prevHash + this.nonce);\r\n    }\r\n}\r\n\r\nexport default BLock;","const validateBlockChain = (blocks) => {\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      if (blocks[i].validate() && (i == 0 || (blocks[i - 1].hash == blocks[i].prevHash && blocks[i - 1].valid))) {\r\n        blocks[i].valid = true;\r\n      }\r\n      else {\r\n        blocks[i].valid = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  export {validateBlockChain};","function Intro() {\r\n    return <div>\r\n        <h1>PoW Blockchain Visual Representation</h1>\r\n        <ul>\r\n            <li><b>Prev. Hash: </b>The hash of the previous block. All the blocks (except for the starting block) have a reference to the hash of the previous block.</li>\r\n            <li><b>Payload: </b>The actual information to be stored.</li>\r\n            <li><b>Nonce: </b>An arbitrary number added by the miner to make the hash of the whole block comply with an arbitrary rule set by the network. In this example the hash needs\r\n            to start with an amount of 0's set by the difficulty level.</li>\r\n            <li><b>Hash: </b>The result of the cryptographic hash function when using all the fields of the block as input.</li>\r\n            <li><b>Difficulty: </b>How many 0's should the mined hash start with.</li>\r\n        </ul>\r\n        <p>When a new block is added it will automatically copy the hash of the previous block, but be aware that if the hash of the previous block changes, for example after\r\n            modifying the payload and re-mining a block, you will have to manually copy the new resulting hash into the \"Prev. Hash\" field of the next block, this behavior is intentional\r\n            as it helps to better grasp the concept of the blockchain.\r\n        </p>\r\n    </div>;\r\n}\r\n\r\nexport default Intro;","function Faq() {\r\n    return <div>\r\n        <h1>FAQ</h1>\r\n        <ul>\r\n            <li>What is this?: It is a visual representation of the basic concepts behind a Proof of Work blockchain.</li>\r\n            <li>What can I do with it?: You can play around with it. <ul>\r\n            <li>You can add a new block and type in a payload.</li>\r\n            <li>You can add mine the block to get it validated.</li>\r\n            <li>You can tamper with the payload and see how blocks become invalid.</li>\r\n            <li>You can increase the difficulty and see how it takes longer to mine (if you go too crazy the browser tab might crash).</li>\r\n            </ul></li>\r\n            <li>\r\n                Is this a real blockchain?: No, not at all. This is a visual representation done for didactic purposes. \r\n            </li>\r\n        </ul>\r\n    </div>;\r\n}\r\n\r\nexport default Faq;","import BlockView from \"../BlockView/BlockView\";\r\nimport style from './BlockChainView.module.css';\r\n\r\nfunction BlockchainView(props) {\r\n    const blockViews = props.blocks.map((block) => {\r\n        return <li className={style.block}><BlockView block={block} onUpdateBlock={props.onUpdateBlock} onMine={props.onMine}></BlockView></li>\r\n    });\r\n\r\n    return <div>\r\n        <div className={style.legs}> \r\n            <div className={style.validleg}></div>\r\n            <div>Valid</div>\r\n        </div>\r\n        <div className={style.legs}>\r\n            <div className={style.invalidleg}></div>\r\n            <div>Invalid</div>\r\n        </div>\r\n        <ul className={style.blocks}>\r\n            {blockViews}\r\n        </ul>\r\n    </div>;\r\n}\r\n\r\nexport default BlockchainView;","import './App.css';\nimport BlockView from './components/BlockView/BlockView';\nimport Block from './models/Block';\nimport { useState } from 'react';\nimport { validateBlockChain } from './utils/blockchain';\nimport Intro from './components/Intro/Intro';\nimport Faq from './components/Faq/Faq';\nimport BlockchainView from './components/BlockchainView/BlockchainView';\n\nfunction App() {\n\n  const [total, setTotal] = useState(1);\n\n  const [difficulty, setDifficulty] = useState(1);\n\n  const [blocks, setBlocks] = useState([new Block(1, null, \"Starting Block\", difficulty)]);\n  const updateBlock = (updatedBlock) => {\n    let block = (blocks.filter((block) => { return block.id == updatedBlock.id }))[0];\n    block.payload = updatedBlock.payload;\n    block.prevHash = updatedBlock.prevHash;\n\n    validateBlockChain(blocks);\n    setBlocks([...blocks]);\n  };\n\n  const mineBlock = (id) => {\n    let block = (blocks.filter((block) => { return block.id == id }))[0];\n    block.mine();\n    validateBlockChain(blocks);\n    setBlocks([...blocks]);\n  };\n\n  const addBlock = () => {\n    const newTotal = total + 1;\n    let last = blocks[blocks.length - 1];\n    let newBlocks = blocks.concat(new Block(newTotal, last.hash, \"\", difficulty));\n    validateBlockChain(newBlocks);\n    setBlocks(newBlocks);\n    setTotal(newTotal);\n  };\n\n  const blockViews = blocks.map((block) => {\n    return <li><BlockView block={block} onUpdateBlock={updateBlock} onMine={mineBlock}></BlockView></li>\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Intro></Intro>\n      </div>\n      <div className=\"container\">\n        <label>New block difficulty</label>\n        <input type=\"text\" value={difficulty} onChange={(event) => setDifficulty(event.target.value)}></input>\n        <button onClick={addBlock}>Add</button>\n      </div>\n      <div className=\"container\">\n        <BlockchainView blocks={blocks} onMine={mineBlock} onUpdateBlock={updateBlock}></BlockchainView>\n      </div>\n      <div className=\"container\">\n        <Faq></Faq>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"BlockView_block__PVek0\",\"invalid\":\"BlockView_invalid__1Uz0E\",\"button\":\"BlockView_button__3_3ZK\"};"],"sourceRoot":""}