{"version":3,"sources":["LabeledNumberInput.js","Results.js","App.js","serviceWorker.js","index.js","Results.module.css"],"names":["LabeledNumberInput","htmlFor","this","props","label","type","min","className","id","onChange","value","placeholder","message","React","Component","Results","state","results","setCountDown","mondays","styles","list","hours","seconds","src","setInterval","setState","prevState","App","age","ageMessage","death","deathMessage","loadingbar","displayResults","onChangeAge","bind","onChangeDeath","onClickCalculate","skullCount","onClick","showResults","event","preventDefault","clearInterval","skullInterval","calculateResults","parseInt","target","getAgeMessage","getDeathMessage","yearsLeft","calculateMondays","calculateHours","calculateSeconds","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.f7b8248a.chunk.js","sourcesContent":["import React from 'react';\r\nclass LabeledNumberInput extends React.Component {\r\n    render() {\r\n      return (\r\n        <div><label htmlFor=\"imp\">{this.props.label}</label>\r\n          <input type=\"number\" min={this.props.min} className=\"form-control form-control-lg\" id=\"imp\"\r\n            onChange={this.props.onChange}\r\n            value={this.props.value}\r\n            placeholder=\"...\" />\r\n          <small id=\"smll\" className=\"form-text\">{this.props.message}</small>\r\n        </div>);\r\n    }\r\n  }\r\n  export default LabeledNumberInput;","import React from 'react';\r\nimport styles from './Results.module.css';\r\nclass Results extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { results: props.results };\r\n        this.setCountDown();\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.results.mondays) {\r\n            return (\r\n                <img src=\"https://media.giphy.com/media/LTFbyWuELIlqlXGLeZ/giphy.gif\"></img>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <ul className={styles.list + \" list-group list-group-flush\"}>\r\n                    <li className=\"list-group-item\">You have roughly {this.state.results.mondays} mondays left</li>\r\n                    <li className=\"list-group-item\">You have around {this.state.results.hours} hours left</li>\r\n                    <li className=\"list-group-item\">You have around {this.state.results.seconds} seconds left</li>\r\n                </ul>\r\n            </div>);\r\n    }\r\n\r\n    setCountDown() {\r\n        setInterval(() => {\r\n            this.setState((prevState) => {\r\n                return { results: { ...prevState.results, seconds: prevState.results.seconds - 1 } };\r\n            });\r\n        }, 1000);\r\n    }\r\n}\r\n\r\nexport default Results;","import React from 'react';\nimport './App.css';\nimport LabeledNumberInput from './LabeledNumberInput';\nimport Results from './Results';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      age: 0,\n      ageMessage: \"C'mon don't lie\",\n      death: 0,\n      deathMessage: \"\",\n      loadingbar: \"\",\n      displayResults: false\n    };\n    this.onChangeAge = this.onChangeAge.bind(this);\n    this.onChangeDeath = this.onChangeDeath.bind(this);\n    this.onClickCalculate = this.onClickCalculate.bind(this);\n    this.skullCount = 0;\n  }\n  render() {\n    return (\n      <div className=\"App container-fluid overflow-auto\">\n        <h1 className=\"d-flex justify-content-center\">How many mondays you have left</h1>\n        <div className=\"d-flex flex-row justify-content-center\">\n          <div className=\"d-flex flex-column justify-content-center\">\n            <form className=\"border border-info rounded p-3\">\n              <LabeledNumberInput\n                min=\"0\"\n                label=\"Age:\"\n                onChange={this.onChangeAge}\n                value={this.state.age}\n                message={this.state.ageMessage}>\n\n              </LabeledNumberInput>\n              <div className=\"mt-3\">\n                <LabeledNumberInput\n                  min=\"0\"\n                  className=\"m-top-2\"\n                  label=\"You think you are going to die at:\"\n                  onChange={this.onChangeDeath}\n                  value={this.state.death}\n                  message={this.state.deathMessage}></LabeledNumberInput>\n              </div>\n              <div className=\"mt-3 d-flex justify-content-center\">\n                <button onClick={this.onClickCalculate} className=\"btn btn-warning\">Calculate</button>\n              </div>\n            </form>\n            <div className=\"mt-3 d-flex justify-content-center\">\n              {this.state.loadingbar}\n            </div>\n            {this.showResults()}\n          </div>\n        </div>\n      </div>)\n      ;\n  }\n\n  onClickCalculate(event) {\n    event.preventDefault();\n\n    // Reset state\n    this.setState({ loadingbar: \"\", displayResults: false });\n    clearInterval(this.skullInterval);\n    this.skullCount = 0;\n\n    this.skullInterval = setInterval(() => {\n      this.skullCount++;\n      this.setState((prevState) => {\n        return { loadingbar: prevState.loadingbar + \"☠️\" };\n      });\n      if (this.skullCount > 6) {\n        clearInterval(this.skullInterval);\n        this.setState({\n          displayResults: true,\n          results: this.calculateResults()\n        });\n      }\n    }, 500);\n  }\n\n  getAgeMessage(age) {\n    let message = \"\";\n    if (age < 16) {\n      message = \"You shouldn't be here\";\n    }\n    else if (age > 80) {\n      message = \"Wow! Still kicking!\";\n    }\n    else {\n      message = \"Mmmm... ok\";\n    }\n    return message;\n  }\n\n  onChangeAge(event) {\n    let age = parseInt(event.target.value);\n\n    this.setState({\n      age: age,\n      ageMessage: this.getAgeMessage(age),\n      deathMessage: this.getDeathMessage(this.state.death, age)\n    });\n  }\n\n  getDeathMessage(death, age) {\n    let message = \"\";\n    if (age > death) {\n      message = \"You time travelling bastard!\";\n    }\n    else if (death - age === 0) {\n      message = \"Hello darkness my old friend...\";\n    }\n    else if (death - age === 1) {\n      message = \"Can you add me to your will?\";\n    }\n    else if (death - age <= 5) {\n      message = \"I've seen worse\";\n    }\n    else if (death > 90) {\n      message = \"There is optimism and then there is this\";\n    }\n    else if (death > 80) {\n      message = \"Yeah sure...\";\n    }\n    else if (death > 60) {\n      message = \"Saving for retirement?\";\n    }\n    else if (death > 50) {\n      message = \"Maybe take a walk from time to time\";\n    }\n    else {\n      message = \"Live Fast, Die Young?\";\n    }\n    return message;\n  }\n\n  onChangeDeath(event) {\n    let death = event.target.value;\n    let age = parseInt(this.state.age);\n    this.setState({\n      death: death,\n      ageMessage: this.getAgeMessage(age),\n      deathMessage: this.getDeathMessage(death, age),\n    });\n  }\n\n  showResults() {\n    if (!this.state.displayResults) return null;\n    return (\n      <div className=\"border border-info rounded p-3\">\n        <Results results={this.state.results}>\n        </Results>\n      </div>)\n  }\n\n  calculateResults() {\n    let yearsLeft = this.state.death - this.state.age;\n    return {\n      mondays: this.calculateMondays(yearsLeft),\n      hours: this.calculateHours(yearsLeft),\n      seconds: this.calculateSeconds(yearsLeft)\n    };\n  }\n\n  calculateMondays(yearsLeft) {\n    if (yearsLeft >= 0) {\n      return yearsLeft * 52;\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  calculateHours(yearsLeft) {\n    if (yearsLeft >= 0) {\n      return yearsLeft * 8760;\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  calculateSeconds(yearsLeft) {\n    if (yearsLeft >= 0) {\n      return yearsLeft * 31556952;\n    }\n    else {\n      return undefined;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Results_list__36FCg\"};"],"sourceRoot":""}